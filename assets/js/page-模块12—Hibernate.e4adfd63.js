(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{551:function(s,t,a){"use strict";a.r(t);var n=a(1),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#问题"}},[s._v("#")]),s._v(" 问题：")]),s._v(" "),a("p",[s._v("113.为什么要使用Hibernate?")]),s._v(" "),a("p",[s._v("114.什么是 ORM框架?")]),s._v(" "),a("p",[s._v("115.Hibernate 中如何在控制台查看打印的sql语句?")]),s._v(" "),a("p",[s._v("116.Hibernate有几种查询方式?")]),s._v(" "),a("p",[s._v("117.Hibernate 实体类可以被定义为final 吗?")]),s._v(" "),a("p",[s._v("118.在Hibernate中使用Integer和int做映射有什么区别?")]),s._v(" "),a("p",[s._v("119.Hibernate是如何工作的?")]),s._v(" "),a("p",[s._v("120.get()和load()的区别?")]),s._v(" "),a("p",[s._v("121.说一下 Hibernate 的缓存机制?")]),s._v(" "),a("p",[s._v("122.Hibernate对象有哪些状态?")]),s._v(" "),a("p",[s._v("123.在 Hibernate 中 getCurrentSession和openSession的区别是什么?")]),s._v(" "),a("p",[s._v("124.Hibernate 实体类必须要有无参构造函数吗?为什么?")]),s._v(" "),a("h2",{attrs:{id:"答案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#答案"}},[s._v("#")]),s._v(" 答案：")]),s._v(" "),a("h3",{attrs:{id:"_113-为什么要使用hibernate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_113-为什么要使用hibernate"}},[s._v("#")]),s._v(" 113.为什么要使用Hibernate?")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。")])]),s._v(" "),a("li",[a("p",[s._v("Hibernate是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作")])]),s._v(" "),a("li",[a("p",[s._v("Hibernate使用Java反射机制，而不是字节码增强程序来实现透明性。")])]),s._v(" "),a("li",[a("p",[s._v("Hibernate的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。")])])]),s._v(" "),a("h3",{attrs:{id:"_114-什么是-orm框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_114-什么是-orm框架"}},[s._v("#")]),s._v(" 114.什么是 ORM框架?")]),s._v(" "),a("p",[s._v("对象-关系映射（Object-Relational Mapping，简称ORM），面向对象的开发方法是当今企业级应用开发环境中的主流开发方法，关系数据库是企业级应用环境中永久存放数据的主流数据存储系统。")]),s._v(" "),a("p",[s._v("对象和关系数据是业务实体的两种表现形式，业务实体在内存中表现为对象，在数据库中表现为关系数据。内存中的对象之间存在关联和继承关系，而在数据库中，关系数据无法直接表达多对多关联和继承关系。因此，对象-关系映射(ORM)系统一般以中间件的形式存在，主要实现程序对象到关系数据库数据的映射。")]),s._v(" "),a("h3",{attrs:{id:"_115-hibernate-中如何在控制台查看打印的sql语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_115-hibernate-中如何在控制台查看打印的sql语句"}},[s._v("#")]),s._v(" 115.Hibernate 中如何在控制台查看打印的sql语句?")]),s._v(" "),a("p",[s._v("参考：blog.csdn.net/Randy_Wang_/article/details/79460306")]),s._v(" "),a("h3",{attrs:{id:"_116-hibernate有几种查询方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_116-hibernate有几种查询方式"}},[s._v("#")]),s._v(" 116.Hibernate有几种查询方式?")]),s._v(" "),a("ul",[a("li",[s._v("hql查询")]),s._v(" "),a("li",[s._v("sql查询")]),s._v(" "),a("li",[s._v("条件查询")])]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("\nhql查询，sql查询，条件查询\n\nHQL"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hibernate")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Language")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" 面向对象的写法"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" query "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createQuery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"from Customer where name = ?"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nquery"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"苍老师"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n\nQBC"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Query")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("By")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Criteria")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("条件查询"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Criteria")]),s._v(" criteria "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createCriteria")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\ncriteria"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Restrictions")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("eq")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"name"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"花姐"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" criteria"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n\nSQL"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SQLQuery")]),s._v(" query "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSQLQuery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"select * from customer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("SQLQuery")]),s._v(" query "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" session"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("createSQLQuery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"select * from customer"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nquery"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("addEntity")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Customer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(">")])]),s._v(" list "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" query"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Hql")]),s._v("： 具体分类\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("、 属性查询 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("、 参数查询、命名参数查询 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("、 关联查询 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("、 分页查询 "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("、 统计函数\n\n\n\nHQL和SQL的区别\n\nHQL是面向对象查询操作的，SQL是结构化查询语言 是面向数据库表结构的\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h3",{attrs:{id:"_117-hibernate-实体类可以被定义为final-吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_117-hibernate-实体类可以被定义为final-吗"}},[s._v("#")]),s._v(" 117.Hibernate 实体类可以被定义为final 吗?")]),s._v(" "),a("p",[s._v("可以将Hibernate的实体类定义为final类，但这种做法并不好。因为Hibernate会使用代理模式在延迟关联的情况下提高性能，如果你把")]),s._v(" "),a("p",[s._v("实体类定义成final类之后，因为 Java不允许对final类进行扩展，所以Hibernate就无法再使用代理了，如此一来就限制了使用可以提升")]),s._v(" "),a("p",[s._v("性能的手段。不过，如果你的持久化类实现了一个接口而且在该接口中声明了所有定义于实体类中的所有public的方法轮到话，你就能")]),s._v(" "),a("p",[s._v("够避免出现前面所说的不利后果。")]),s._v(" "),a("h3",{attrs:{id:"_118-在hibernate中使用integer和int做映射有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_118-在hibernate中使用integer和int做映射有什么区别"}},[s._v("#")]),s._v(" 118.在Hibernate中使用Integer和int做映射有什么区别?")]),s._v(" "),a("p",[s._v("在Hibernate中，如果将OID定义为Integer类型，那么Hibernate就可以根据其值是否为null而判断一个对象是否是临时的，如果将OID")]),s._v(" "),a("p",[s._v("定义为了int类型，还需要在hbm映射文件中设置其unsaved-value属性为0。")]),s._v(" "),a("h3",{attrs:{id:"_119-hibernate是如何工作的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_119-hibernate是如何工作的"}},[s._v("#")]),s._v(" 119.Hibernate是如何工作的?")]),s._v(" "),a("p",[s._v("hibernate工作原理：")]),s._v(" "),a("ol",[a("li",[s._v("通过Configuration config = new Configuration().configure();//读取并解析hibernate.cfg.xml配置文件")]),s._v(" "),a("li",[s._v("由hibernate.cfg.xml中的"),a("mapping",{attrs:{resource:"com/xx/User.hbm.xml"}}),s._v("读取并解析映射信息")],1),s._v(" "),a("li",[s._v("通过SessionFactory sf = config.buildSessionFactory();//创建SessionFactory")]),s._v(" "),a("li",[s._v("Session session = sf.openSession();//打开Sesssion")]),s._v(" "),a("li",[s._v("Transaction tx = session.beginTransaction();//创建并启动事务Transation")]),s._v(" "),a("li",[s._v("persistent operate操作数据，持久化操作")]),s._v(" "),a("li",[s._v("tx.commit();//提交事务")]),s._v(" "),a("li",[s._v("关闭Session")]),s._v(" "),a("li",[s._v("关闭SesstionFactory")])]),s._v(" "),a("h3",{attrs:{id:"_120-get-和load-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_120-get-和load-的区别"}},[s._v("#")]),s._v(" 120.get()和load()的区别?")]),s._v(" "),a("ul",[a("li",[s._v("load() 没有使用对象的其他属性的时候，没有SQL  延迟加载")]),s._v(" "),a("li",[s._v("get() 没有使用对象的其他属性的时候，也生成了SQL  立即加载")])]),s._v(" "),a("h3",{attrs:{id:"_121-说一下-hibernate-的缓存机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_121-说一下-hibernate-的缓存机制"}},[s._v("#")]),s._v(" 121.说一下 Hibernate 的缓存机制?")]),s._v(" "),a("p",[s._v("Hibernate中的缓存分为一级缓存和二级缓存。")]),s._v(" "),a("p",[s._v("一级缓存就是 Session 级别的缓存，在事务范围内有效是,内置的不能被卸载。二级缓存是 SesionFactory级别的缓存，从应用启动到应用结束有效。是可选的，默认没有二级缓存，需要手动开启。保存数据库后，缓存在内存中保存一份，如果更新了数据库就要同步更新。")]),s._v(" "),a("p",[s._v("什么样的数据适合存放到第二级缓存中？")]),s._v(" "),a("ul",[a("li",[s._v("很少被修改的数据  帖子的最后回复时间")]),s._v(" "),a("li",[s._v("经常被查询的数据  电商的地点")]),s._v(" "),a("li",[s._v("不是很重要的数据，允许出现偶尔并发的数据")]),s._v(" "),a("li",[s._v("不会被并发访问的数据")]),s._v(" "),a("li",[s._v("常量数据")])]),s._v(" "),a("p",[s._v("**扩展：**Hibernate的二级缓存默认是不支持分布式缓存的。使用 memcahe,redis等中央缓存来代替二级缓存。")]),s._v(" "),a("h3",{attrs:{id:"_122-hibernate对象有哪些状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_122-hibernate对象有哪些状态"}},[s._v("#")]),s._v(" 122.Hibernate对象有哪些状态?")]),s._v(" "),a("p",[s._v("Hibernate里对象有三种状态：")]),s._v(" "),a("ol",[a("li",[s._v("Transient（瞬时）：对象刚new出来，还没设id，设了其他值。")]),s._v(" "),a("li",[s._v("Persistent（持久）：调用了save()、saveOrUpdate()，就变成Persistent，有id。")]),s._v(" "),a("li",[s._v("Detached（脱管）：当session  close()完之后，变成Detached。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CMr%20Yang%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210110165420322.png",alt:"image-20210110165420322"}})]),s._v(" "),a("h3",{attrs:{id:"_123-在-hibernate-中-getcurrentsession和opensession的区别是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_123-在-hibernate-中-getcurrentsession和opensession的区别是什么"}},[s._v("#")]),s._v(" 123.在 Hibernate 中 getCurrentSession和openSession的区别是什么?")]),s._v(" "),a("p",[s._v("openSession 从字面上可以看得出来，是打开一个新的session对象，而且每次使用都是打开一个新的session，假如连续使用多次，则获得的session不是同一个对象，并且使用完需要调用close方法关闭session。")]),s._v(" "),a("p",[s._v("getCurrentSession ，从字面上可以看得出来，是获取当前上下文一个session对象，当第一次使用此方法时，会自动产生一个session对象，并且连续使用多次时，得到的session都是同一个对象，这就是与openSession的区别之一，简单而言，getCurrentSession 就是：如果有已经使用的，用旧的，如果没有，建新的。")]),s._v(" "),a("p",[s._v("注意：在实际开发中，往往使用getCurrentSession多，因为一般是处理同一个事务（即是使用一个数据库的情况），所以在一般情况下比较少使用openSession或者说openSession是比较老旧的一套接口了。")]),s._v(" "),a("h3",{attrs:{id:"_124-hibernate-实体类必须要有无参构造函数吗-为什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_124-hibernate-实体类必须要有无参构造函数吗-为什么"}},[s._v("#")]),s._v(" 124.Hibernate 实体类必须要有无参构造函数吗?为什么?")]),s._v(" "),a("p",[s._v("必须，因为hibernate框架会调用这个默认构造方法来构造实例对象，即Class类的newInstance方法，这个方法就是通过调用默认构造方法来创建实例对象的。")]),s._v(" "),a("p",[s._v("另外再提醒一点，如果你没有提供任何构造方法，虚拟机会自动提供默认构造方法（无参构造器），但是如果你提供了其他有参数的构造方法的话，虚拟机就不再为你提供默认构造方法，这时必须手动把无参构造器写在代码里，否则new Xxxx()是会报错的，所以默认的构造方法不是必须的，只在有多个构造方法时才是必须的，这里“必须”指的是“必须手动写出来”。")])])}),[],!1,null,null,null);t.default=e.exports}}]);