(window.webpackJsonp=window.webpackJsonp||[]).push([[103],{853:function(s,n,e){"use strict";e.r(n);var a=e(1),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"find"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#find"}},[s._v("#")]),s._v(" find")]),s._v(" "),e("p",[e("code",[s._v("find")]),s._v(" 命令用于寻找文件，会包括当前目录的所有下级目录。")]),s._v(" "),e("p",[s._v("如果不带任何参数，"),e("code",[s._v("find")]),s._v(" 文件会列出当前目录的所有文件，甚至还包括相对路径。如果把结果导入 "),e("code",[s._v("sort")]),s._v(" 效果更好。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[s._v("$ "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n./Makefile\n./README\n./build\n./client.c\n./client.h\n./common.h\n./project.c\n./server.c\n./server.h\n./tests\n./tests/suite1.pl\n./tests/suite2.pl\n./tests/suite3.pl\n./tests/suite4.pl\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("如果想要 "),e("code",[s._v("ls -l")]),s._v(" 样式的列表，只要在 "),e("code",[s._v("find")]),s._v(" 后面加上 "),e("code",[s._v("-ls")]),s._v("。")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" -ls\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[e("code",[s._v("find")]),s._v(" 有它自己的一套复杂的过滤语句。下面列举的是一些最常用的您可以用以获取某些文件列表的过滤器:")]),s._v(" "),e("ul",[e("li",[e("code",[s._v("find -name '*.c'")]),s._v(" —— 查找符合某 shell 式样式的文件名的文件。用 iname 开启大小写不敏感搜索。")]),s._v(" "),e("li",[e("code",[s._v("find -path '_test_'")]),s._v(" —— 查找符合某 shell 式样式的路径的文件。用 ipath 开启大小写不敏感搜索。")]),s._v(" "),e("li",[e("code",[s._v("find -mtime -5")]),s._v(" —— 查找近五天内编辑过的文件。您也可以用 +5 来查找五天之前编辑过的文件。")]),s._v(" "),e("li",[e("code",[s._v("find -newer server.c")]),s._v(" —— 查找比 server.c 更新的文件。")]),s._v(" "),e("li",[e("code",[s._v("find -type d")]),s._v(" —— 查找所有文件夹。如果想找出所有文件，那就用 "),e("code",[s._v("-type f")]),s._v("；找符号连接就用 "),e("code",[s._v("-type l")]),s._v("。")])]),s._v(" "),e("p",[s._v("要注意，上面提到的这些过滤器都是可以组合使用的，例如找出近两天内编辑过的 C 源码:")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" -name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.c'")]),s._v(" -mtime -2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("默认情况下， find 对搜索结果所采取的动作只是简单地通过标准输出输出一个列表，然而其实还有其他一些有用的后续动作。")]),s._v(" "),e("ul",[e("li",[s._v("-ls —— 如前文，提供了一种类 ls -l 式的列表。")]),s._v(" "),e("li",[s._v("-delete —— 删除符合查找条件的文件。")]),s._v(" "),e("li",[s._v("-exec —— 对搜索结果里的每个文件都运行某个命令， "),e("code",[s._v("{}")]),s._v(" 会被替换成适当的文件名，并且命令用 "),e("code",[s._v("\\;")]),s._v(" 终结。")])]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" -name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.pl'")]),s._v(" -exec perl -c "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("\\")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("您也可以使用 "),e("code",[s._v("+")]),s._v(" 作为终止符来对所有结果运行一次命令。我还发现一个我经常使用的小技巧，就是用 "),e("code",[s._v("find")]),s._v(" 生成一个文件列表，然后在 Vim 的垂直分窗中编辑:")]),s._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("find")]),s._v(" -name "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'*.c'")]),s._v(" -exec "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("vim")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" +\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])])])}),[],!1,null,null,null);n.default=t.exports}}]);